---
title: "Challenge 4"
author: "Tim Shores"
description: "More data wrangling: pivoting"
date: "03/18/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: '^(?:http:|https:)\/\/www\.quarto\.org\/custom'
categories:
  - challenge_4
  - eggs
---

```{r}
#| label: setup
#| warning: false
#| message: false

#| label: setup
#| warning: false
#| message: false

my_packages <- c("tidyverse", "readxl", "knitr") # create vector of packages
invisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages


knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Challenge 4 includes four tasks:

1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2)  tidy data (as needed, including sanity checks)
3)  identify variables that need to be mutated
4)  mutate variables and sanity check all mutations

## Task 1) Read in and Describe the Data

I chose to read in the organic egg file, organiceggpoultry.xls. I use the same process as in [my Challenge 3 submission](https://dacss.github.io/601_Spring_2023/posts/TimShores_challenge3.html){.external target="_blank"}. I left out the details in this post, and show only the first 18 of 1,080 lines of the final data frame.

```{r}
listEggDFs <- map(set_names(excel_sheets("../posts/_data/organiceggpoultry.xls")),
read_xls, path = "../posts/_data/organiceggpoultry.xls") # read in all sheets as dataframes in a list

df_eggPoultryData <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[1]] # assign the first df in the list to a separate df

productname <- c(df_eggPoultryData[2,1],df_eggPoultryData[2,7]) # Store header values in list variables for use after pivot.
unitname <- c(df_eggPoultryData[3,1],df_eggPoultryData[3,7])

colnames(df_eggPoultryData) <- df_eggPoultryData[4, ] # Assign values from the 4th populated row to column names
colnames(df_eggPoultryData)[1] <- "month" # source data has no name in date column

df_eggPoultryData <- df_eggPoultryData %>% 
  slice(-(1:4)) %>% # Slice off the first four rows, which do not have table data.
  select(!`NA`) %>% # Select all columns but the empty one in the middle
  separate_wider_delim(month, delim = " ", names = c("month", "year"), too_few = "align_start", too_many = "merge") %>% 
  mutate(month = replace(month, month == 'Jan', 'January')) %>%
  mutate(year = replace(year, year == '/1', NA)) %>%
  fill(year) %>% # tidy the month column and separate year into its own column. The source data labels the year only on January, implying the year for the other months. It's important to make both month and year explicit for each observation so we don't end up with analysis that makes it difficult to identify the year.
  pivot_longer(cols = -c(month,year), names_to = "item", values_to = "price") %>% # to pivot the egg and chicken product column headings into row values under a new `item` column, with their values listed in a `price` column
  mutate(item = str_remove_all(item, '\\n')) %>% # tidy up item values and make labels consistent
  mutate(item = str_remove_all(item, '1/2 Dozen')) %>%
  mutate(item = str_replace_all(item, 'Doz\\.','Dozen')) %>%
  mutate(product = case_when( # assign the egg and chicken product and unit variables that I recorded earlier according to each egg and chicken item
    str_detect(item, regex("^[EL]")) ~ productname[[1]],
    str_detect(item, regex("^[BTW]")) ~ productname[[2]]
    )) %>% 
  mutate(unit = case_when( 
    str_detect(item, regex("^[EL]")) ~ unitname[[1]],
    str_detect(item, regex("^[BTW]")) ~ unitname[[2]]
    )) %>%
  print(n=18) # print a sample of the table
```



### Briefly describe the data

## Tidy Data (as needed)

Is your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.

```{r}


```

Any additional comments?

## Identify variables that need to be mutated

Are there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?

Document your work here.

```{r}

```

Any additional comments?
