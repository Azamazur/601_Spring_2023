---
title: "Challenge 3"
author: "Tim Shores"
description: "Tidy Data: Pivoting"
date: "03/05/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
  - animal_weights
  - eggs
  - australian_marriage
  - usa_households
  - sce_labor
---

```{r}
#| label: setup
#| warning: false
#| message: false

my_packages <- c("tidyverse", "readxl", "knitr") # create vector of packages
invisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages


knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Challenge 3 includes four tasks:

1. read in a dataset and describe it
2. identify what needs to be done to tidy the current data
3. anticipate the shape of pivoted data
4. pivot the data into tidy format using `pivot_longer`


## Task 1) Read in and Describe the Data


I chose to read in the organic egg file, organiceggpoultry.xls. The thought of chickens always brings a smile to my face.

One tricky property of the egg data set is that the Excel file includes data in three tabs, so I can't just read it in with `read_xls()`. I use `excel_sheets()` to return a list of data frames with data populated by each sheet in the Excel file. From the `purrr` library, the `map()` assigns each sheet from the list as a vector element. Also from `purrr`, `set_names()` gives the vector element the same name as the Excel sheet.

Messy, but a good stepping stone:

```{r}
#| echo: true
listEggDFs <- map(set_names(excel_sheets("../posts/_data/organiceggpoultry.xls")),
read_xls, path = "../posts/_data/organiceggpoultry.xls") # read in all sheets as dataframes in a list

listEggDFs
```

The next step is to use `map()` again to assign each data frame in the list to its own variable. This will let me tidy each data frame separately. This is useful, because each Excel sheet is organized in a different way. For ease of reference, I chose variable names similar to sheet names in the source file. 

```{r}
df_eggData <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[1]] # assign the first df in the list to a separate df
df_eggPrices <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[2]] # assign the second df in the list to a separate df
df_poultryPrices <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[3]] # assign the third df in the list to a separate df

df_eggData
df_eggPrices
df_poultryPrices
```

Rename columns based on the 4th populated row, then remove the first four rows, and remove a column that lacks data.

```{r}
colnames(df_eggData) <- df_eggData[4, ]
colnames(df_eggData)[1] <- "Month and Year"
df_eggData <- slice(df_eggData, -(1:4))
df_eggData <- select(df_eggData, !`NA`)
df_eggData
```


### Briefly describe the data


## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

### Challenge: Describe the final dimensions

Document your work here.

```{r}


```

Any additional comments?

## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "trade_value")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data

Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?

```{r}


```

Any additional comments?
