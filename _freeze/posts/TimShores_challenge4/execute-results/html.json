{
  "hash": "aa4cb9d3ac05ffd5954d61a1a8ffb5ce",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Tim Shores\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"03/18/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n    link-external-icon: true\n    link-external-newwindow: true\n    link-external-filter: '^(?:http:|https:)\\/\\/www\\.quarto\\.org\\/custom'\ncategories:\n  - challenge_4\n  - eggs\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#| label: setup\n#| warning: false\n#| message: false\n\nmy_packages <- c(\"tidyverse\", \"readxl\", \"knitr\") # create vector of packages\ninvisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages\n\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nChallenge 4 includes four tasks:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Task 1) Read in and Describe the Data\n\nI chose to read in the organic egg file, organiceggpoultry.xls. I use the same process as in [my Challenge 3 submission](https://dacss.github.io/601_Spring_2023/posts/TimShores_challenge3.html){.external target=\"_blank\"}. I left out the details in this post, and show only the first 18 of 1,080 lines of the final data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistEggDFs <- map(set_names(excel_sheets(\"../posts/_data/organiceggpoultry.xls\")),\nread_xls, path = \"../posts/_data/organiceggpoultry.xls\") # read in all sheets as dataframes in a list\n\ndf_eggPoultryData <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[1]] # assign the first df in the list to a separate df\n\nproductname <- c(df_eggPoultryData[2,1],df_eggPoultryData[2,7]) # Store header values in list variables for use after pivot.\nunitname <- c(df_eggPoultryData[3,1],df_eggPoultryData[3,7])\n\ncolnames(df_eggPoultryData) <- df_eggPoultryData[4, ] # Assign values from the 4th populated row to column names\ncolnames(df_eggPoultryData)[1] <- \"month\" # source data has no name in date column\n\ndf_eggPoultryData <- df_eggPoultryData %>% \n  slice(-(1:4)) %>% # Slice off the first four rows, which do not have table data.\n  select(!`NA`) %>% # Select all columns but the empty one in the middle\n  separate_wider_delim(month, delim = \" \", names = c(\"month\", \"year\"), too_few = \"align_start\", too_many = \"merge\") %>% \n  mutate(month = replace(month, month == 'Jan', 'January')) %>%\n  mutate(year = replace(year, year == '/1', NA)) %>%\n  fill(year) %>% # tidy the month column and separate year into its own column. The source data labels the year only on January, implying the year for the other months. It's important to make both month and year explicit for each observation so we don't end up with analysis that makes it difficult to identify the year.\n  pivot_longer(cols = -c(month,year), names_to = \"item\", values_to = \"price\") %>% # to pivot the egg and chicken product column headings into row values under a new `item` column, with their values listed in a `price` column\n  mutate(item = str_remove_all(item, '\\\\n')) %>% # tidy up item values and make labels consistent\n  mutate(item = str_remove_all(item, '1/2 Dozen')) %>%\n  mutate(item = str_replace_all(item, 'Doz\\\\.','Dozen')) %>%\n  mutate(product = case_when( # assign the egg and chicken product and unit variables that I recorded earlier according to each egg and chicken item\n    str_detect(item, regex(\"^[EL]\")) ~ productname[[1]],\n    str_detect(item, regex(\"^[BTW]\")) ~ productname[[2]]\n    )) %>% \n  mutate(unit = case_when( \n    str_detect(item, regex(\"^[EL]\")) ~ unitname[[1]],\n    str_detect(item, regex(\"^[BTW]\")) ~ unitname[[2]]\n    )) %>%\n  print(n=18) # print a sample of the table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,080 × 6\n   month    year  item                  price   product                    unit \n   <chr>    <chr> <chr>                 <chr>   <chr>                      <chr>\n 1 January  2004  Extra Large Dozen     230     USDA Certified Organic Eg… Pric…\n 2 January  2004  Extra Large 1/2 Dozen 132     USDA Certified Organic Eg… Pric…\n 3 January  2004  Large Dozen           230     USDA Certified Organic Eg… Pric…\n 4 January  2004  Large 1/2 Dozen       126     USDA Certified Organic Eg… Pric…\n 5 January  2004  Whole                 197.5   USDA Certified Organic Yo… Pric…\n 6 January  2004  B/S Breast            645.5   USDA Certified Organic Yo… Pric…\n 7 January  2004  Bone-in Breast        too few USDA Certified Organic Yo… Pric…\n 8 January  2004  Whole Legs            193.5   USDA Certified Organic Yo… Pric…\n 9 January  2004  Thighs                too few USDA Certified Organic Yo… Pric…\n10 February 2004  Extra Large Dozen     230     USDA Certified Organic Eg… Pric…\n11 February 2004  Extra Large 1/2 Dozen 134.5   USDA Certified Organic Eg… Pric…\n12 February 2004  Large Dozen           226.25  USDA Certified Organic Eg… Pric…\n13 February 2004  Large 1/2 Dozen       128.5   USDA Certified Organic Eg… Pric…\n14 February 2004  Whole                 197.5   USDA Certified Organic Yo… Pric…\n15 February 2004  B/S Breast            642.5   USDA Certified Organic Yo… Pric…\n16 February 2004  Bone-in Breast        too few USDA Certified Organic Yo… Pric…\n17 February 2004  Whole Legs            193.5   USDA Certified Organic Yo… Pric…\n18 February 2004  Thighs                203     USDA Certified Organic Yo… Pric…\n# … with 1,062 more rows\n```\n:::\n:::\n\n\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}