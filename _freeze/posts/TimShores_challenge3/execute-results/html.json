{
  "hash": "9c7909a6e815fd82a32638bcfc7bbe25",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Tim Shores\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"03/05/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_packages <- c(\"tidyverse\", \"readxl\", \"knitr\") # create vector of packages\ninvisible(lapply(my_packages, require, character.only = TRUE)) # load multiple packages\n\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nChallenge 3 includes four tasks:\n\n1. read in a dataset and describe it\n2. identify what needs to be done to tidy the current data\n3. anticipate the shape of pivoted data\n4. pivot the data into tidy format using `pivot_longer`\n\n\n## Task 1) Read in and Describe the Data\n\n\nI chose to read in the organic egg file, organiceggpoultry.xls. The thought of chickens always brings a smile to my face.\n\nOne tricky property of the egg data set is that the Excel file includes data in three tabs, so I can't just read it in with `read_xls()`. I use `excel_sheets()` to return a list of data frames with data populated by each sheet in the Excel file. From the `purrr` library, the `map()` assigns each sheet from the list as a vector element. Also from `purrr`, `set_names()` gives the vector element the same name as the Excel sheet.\n\nMessy, but a good stepping stone:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistEggDFs <- map(set_names(excel_sheets(\"../posts/_data/organiceggpoultry.xls\")),\nread_xls, path = \"../posts/_data/organiceggpoultry.xls\") # read in all sheets as dataframes in a list\n\nlistEggDFs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Data\n# A tibble: 124 × 11\n   (Certified Orga…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11\n   <chr>             <chr> <chr> <chr> <chr> <lgl> <chr> <chr> <chr> <chr> <chr>\n 1 <NA>               <NA>  <NA>  <NA>  <NA> NA    <NA>  <NA>  <NA>  <NA>  <NA> \n 2 USDA Certified O…  <NA>  <NA>  <NA>  <NA> NA    USDA… <NA>  <NA>  <NA>  <NA> \n 3 Price per Carton…  <NA>  <NA>  <NA>  <NA> NA    Pric… <NA>  <NA>  <NA>  <NA> \n 4 <NA>              \"Ext… \"Ext… \"Lar… \"Lar… NA    Whole B/S … Bone… Whol… Thig…\n 5 Jan 2004          \"230\" \"132\" \"230\" \"126\" NA    197.5 645.5 too … 193.5 too …\n 6 February          \"230\" \"134… \"226… \"128… NA    197.5 642.5 too … 193.5 203  \n 7 March             \"230\" \"137\" \"225\" \"131\" NA    209   642.5 too … 193.5 203  \n 8 April             \"234… \"137\" \"225\" \"131\" NA    212   642.5 too … 193.5 203  \n 9 May               \"236\" \"137\" \"225\" \"131\" NA    214.5 642.5 too … 193.5 203  \n10 June              \"241\" \"137\" \"231… \"133… NA    216.… 641   too … 201.… 200.…\n# … with 114 more rows, and abbreviated variable name\n#   ¹​`(Certified Organic denotes products grown and processed according to USDA's national organic standards and certified by USDA-accredited State and private certification organizations.)`\n\n$`Organic egg prices, 2004-13`\n# A tibble: 75 × 13\n   Prices pa…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12\n   <chr>       <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 \"Year\"      Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n 2 \"2013\"      <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n 3 \"Certified… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 4 \"Extra Lar… 290   290   290   290   290   290   290   290   290   290   290  \n 5 \"Extra Lar… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.…\n 6 \"Large \\nD… 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5\n 7 \"Large \\n1… 178   178   178   178   178   178   178   178   178   178   178  \n 8  <NA>       Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n 9 \"2012\"      <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n10 \"Certified… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n# … with 65 more rows, 1 more variable: ...13 <chr>, and abbreviated variable\n#   name\n#   ¹​`Prices paid by first receiver for USDA certified organic eggs, monthly, 2004-13 1/`\n\n$`Organic poultry prices, 2004-13`\n# A tibble: 100 × 13\n   Prices pa…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12\n   <chr>       <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 Year        Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n 2 2013        <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n 3 Organic yo… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 4 Whole       238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5\n 5 B/S Breast  703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.…\n 6 Bone-in Br… 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5\n 7 Whole Legs  203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5\n 8 Thighs      216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.…\n 9 <NA>        Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n10 2012        <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n# … with 90 more rows, 1 more variable: ...13 <chr>, and abbreviated variable\n#   name\n#   ¹​`Prices paid by first receiver for USDA certified organic poultry, monthly, 2004-13 1/`\n```\n:::\n:::\n\n\nThe next step is to use `map()` again to assign each data frame in the list to its own variable. This will let me tidy each data frame separately. This is useful, because each Excel sheet is organized in a different way. For ease of reference, I chose variable names similar to sheet names in the source file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_eggData <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[1]] # assign the first df in the list to a separate df\ndf_eggPrices <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[2]] # assign the second df in the list to a separate df\ndf_poultryPrices <- map(names(listEggDFs), ~assign(.x, listEggDFs[[.x]], envir = .GlobalEnv))[[3]] # assign the third df in the list to a separate df\n\ndf_eggData\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 124 × 11\n   (Certified Orga…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11\n   <chr>             <chr> <chr> <chr> <chr> <lgl> <chr> <chr> <chr> <chr> <chr>\n 1 <NA>               <NA>  <NA>  <NA>  <NA> NA    <NA>  <NA>  <NA>  <NA>  <NA> \n 2 USDA Certified O…  <NA>  <NA>  <NA>  <NA> NA    USDA… <NA>  <NA>  <NA>  <NA> \n 3 Price per Carton…  <NA>  <NA>  <NA>  <NA> NA    Pric… <NA>  <NA>  <NA>  <NA> \n 4 <NA>              \"Ext… \"Ext… \"Lar… \"Lar… NA    Whole B/S … Bone… Whol… Thig…\n 5 Jan 2004          \"230\" \"132\" \"230\" \"126\" NA    197.5 645.5 too … 193.5 too …\n 6 February          \"230\" \"134… \"226… \"128… NA    197.5 642.5 too … 193.5 203  \n 7 March             \"230\" \"137\" \"225\" \"131\" NA    209   642.5 too … 193.5 203  \n 8 April             \"234… \"137\" \"225\" \"131\" NA    212   642.5 too … 193.5 203  \n 9 May               \"236\" \"137\" \"225\" \"131\" NA    214.5 642.5 too … 193.5 203  \n10 June              \"241\" \"137\" \"231… \"133… NA    216.… 641   too … 201.… 200.…\n# … with 114 more rows, and abbreviated variable name\n#   ¹​`(Certified Organic denotes products grown and processed according to USDA's national organic standards and certified by USDA-accredited State and private certification organizations.)`\n```\n:::\n\n```{.r .cell-code}\ndf_eggPrices\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 75 × 13\n   Prices pa…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12\n   <chr>       <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 \"Year\"      Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n 2 \"2013\"      <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n 3 \"Certified… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 4 \"Extra Lar… 290   290   290   290   290   290   290   290   290   290   290  \n 5 \"Extra Lar… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.… 188.…\n 6 \"Large \\nD… 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5 267.5\n 7 \"Large \\n1… 178   178   178   178   178   178   178   178   178   178   178  \n 8  <NA>       Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n 9 \"2012\"      <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n10 \"Certified… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n# … with 65 more rows, 1 more variable: ...13 <chr>, and abbreviated variable\n#   name\n#   ¹​`Prices paid by first receiver for USDA certified organic eggs, monthly, 2004-13 1/`\n```\n:::\n\n```{.r .cell-code}\ndf_poultryPrices\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 13\n   Prices pa…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12\n   <chr>       <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n 1 Year        Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n 2 2013        <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n 3 Organic yo… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n 4 Whole       238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5 238.5\n 5 B/S Breast  703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.… 703.…\n 6 Bone-in Br… 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5 390.5\n 7 Whole Legs  203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5 203.5\n 8 Thighs      216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.… 216.…\n 9 <NA>        Jan.  Feb.  Mar.  Apr.  May   June  July  Aug.  Sep.  Oct.  Nov. \n10 2012        <NA>  <NA>  <NA>  <NA>  <NA>  Cent… <NA>  <NA>  <NA>  <NA>  <NA> \n# … with 90 more rows, 1 more variable: ...13 <chr>, and abbreviated variable\n#   name\n#   ¹​`Prices paid by first receiver for USDA certified organic poultry, monthly, 2004-13 1/`\n```\n:::\n:::\n\n\nRemove the first 4 rows of df_eggData \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_eggData) <- df_eggData[4, ]\ncolnames(df_eggData)[1] <- \"Month and Year\"\ndf_eggData <- slice(df_eggData, -(1:4))\ndf_eggData <- select(df_eggData, !`NA`)\ndf_eggData\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 × 10\n   Month …¹ Extra…² Extra…³ Large…⁴ Large…⁵ Whole B/S B…⁶ Bone-…⁷ Whole…⁸ Thighs\n   <chr>    <chr>   <chr>   <chr>   <chr>   <chr> <chr>   <chr>   <chr>   <chr> \n 1 Jan 2004 230     132     230     126     197.5 645.5   too few 193.5   too f…\n 2 February 230     134.5   226.25  128.5   197.5 642.5   too few 193.5   203   \n 3 March    230     137     225     131     209   642.5   too few 193.5   203   \n 4 April    234.5   137     225     131     212   642.5   too few 193.5   203   \n 5 May      236     137     225     131     214.5 642.5   too few 193.5   203   \n 6 June     241     137     231.375 133.5   216.… 641     too few 201.875 200.3…\n 7 July     241     137     233.5   133.5   217   642.5   390.5   203.5   199.5 \n 8 August   241     137     233.5   133.5   217   642.5   390.5   203.5   199.5 \n 9 Septemb… 241     135.875 233.5   129.75  217   642.5   390.5   203.5   199.5 \n10 October  241     135.5   233.5   128.5   217   642.5   390.5   203.5   199.5 \n# … with 110 more rows, and abbreviated variable names ¹​`Month and Year`,\n#   ²​`Extra Large \\nDozen`, ³​`Extra Large 1/2 Doz.\\n1/2 Dozen`,\n#   ⁴​`Large \\nDozen`, ⁵​`Large \\n1/2 Doz.`, ⁶​`B/S Breast`, ⁷​`Bone-in Breast`,\n#   ⁸​`Whole Legs`\n```\n:::\n:::\n\n\n\n### Briefly describe the data\n\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    1676.    -573.\n2 USA      1990 NAFTA     859.    1916.\n3 France   1980 EU        902.    -433.\n4 Mexico   1990 NAFTA    1184.     918.\n5 USA      1980 NAFTA    1493.    2020.\n6 France   1990 EU       1350.    1046.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              1676.\n 2 Mexico   1980 NAFTA incoming              -573.\n 3 USA      1990 NAFTA outgoing               859.\n 4 USA      1990 NAFTA incoming              1916.\n 5 France   1980 EU    outgoing               902.\n 6 France   1980 EU    incoming              -433.\n 7 Mexico   1990 NAFTA outgoing              1184.\n 8 Mexico   1990 NAFTA incoming               918.\n 9 USA      1980 NAFTA outgoing              1493.\n10 USA      1980 NAFTA incoming              2020.\n11 France   1990 EU    outgoing              1350.\n12 France   1990 EU    incoming              1046.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n:::\n\n\nAny additional comments?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}