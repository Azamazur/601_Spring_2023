{
  "hash": "ddfd84487977a79d3689a4a9a274f601",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Meredith Rolfe\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - animal_weights\n  - eggs\n  - australian_marriage\n  - usa_households\n  - sce_labor\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organiceggpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xls ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.xlsx üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_marriage <- readxl::read_excel(\"_data/australian_marriage_law_postal_survey_2017_-_response_final.xls\", sheet=\"Table 2\", skip=7)\n\naus_marriage <- aus_marriage[1:172,] #remove footnotes\n\naus_marriage$division <- NA #initialize division variable\n\naus_marriage$division[1:47] <- \"New South Wales\"\naus_marriage$division[51:87] <- \"Victoria\"\naus_marriage$division[91:120] <- \"Queensland\"\naus_marriage$division[124:134] <- \"South Australia\"\naus_marriage$division[157:161] <- \"Tasmania\"\naus_marriage$division[165:166] <- \"Northern Territory\"\naus_marriage$division[170:171] <- \"Australian Capital Territory\"\n\naus_marriage <- aus_marriage %>%\n  filter(!is.na(division)) %>% #remove any invalid divisions\n    rename(x1 = 1, x2 = 2, x3 = 3, x4 = 4, x5 = 5, x6 = 6, x7 = 7, x8 = 8, x9 = 9, x10 = 10, x11 = 11, x12 = 12, x13 = 13, x14 = 14, x15 = 15, x16 = 16) %>%\n  mutate(x1 = gsub(\"\\\\(c)\", \"\", x1)) %>%\n  mutate(x1 = gsub(\"\\\\(d)\", \"\", x1)) %>%\n  mutate(x1 = gsub(\"\\\\(e)\", \"\", x1)) #eliminate footnote letters in district name\n\nhead(aus_marriage)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 17\n  x1        x2    x3    x4    x5    x6    x7 x8       x9   x10   x11   x12   x13\n  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <lgl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Banks  37736  44.9 46343  55.1 84079   100 NA    84079  79.9   247   0.2 20928\n2 Barton 37153  43.6 47984  56.4 85137   100 NA    85137  77.8   226   0.2 24008\n3 Benne‚Ä¶ 42943  49.8 43215  50.2 86158   100 NA    86158  81     244   0.2 19973\n4 Berow‚Ä¶ 48471  54.6 40369  45.4 88840   100 NA    88840  84.5   212   0.2 16038\n5 Blaxl‚Ä¶ 20406  26.1 57926  73.9 78332   100 NA    78332  75     220   0.2 25883\n6 Bradf‚Ä¶ 53681  60.6 34927  39.4 88608   100 NA    88608  83.5   202   0.2 17261\n# ‚Ä¶ with 4 more variables: x14 <dbl>, x15 <dbl>, x16 <dbl>, division <chr>\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA     982.    -185.\n2 USA      1990 NAFTA     233.     855.\n3 France   1980 EU       -619.     810.\n4 Mexico   1990 NAFTA    1223.    1026.\n5 USA      1980 NAFTA    1255.    1377.\n6 France   1990 EU        432.    1291.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nThis results in a new dataframe with 5 columns, where two columns identify the case (division and district) and the remaining three columns represent the pivoted variables (count, percent, and response type).\n\nTo calculate the total number of columns in the new dataframe, the text uses the formula k = 2 + 2 + 1, where k represents the total number of columns. The first two terms, 2 + 2, represent the number of columns used to identify the case, and the last term, 1, represents the response type variable. Applying this formula yields a total of 5 columns.\n\nHowever, the text does not provide enough information to determine the exact number of columns in the resulting dataframe. Instead, we can infer that the dataframe will have at least 5 columns, based on the description of the data transformation process.\n\nTo determine the exact number of columns in the new dataframe, we would need additional information about the original dataframe, such as the number of rows, the names and types of the original columns, and the specific method used to pivot the data. Without this information, we cannot calculate the exact number of columns in the resulting dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_marriage2 <- aus_marriage %>%\n    select(x1, x2, x3, x4, x5, division) %>%\n  rename(district = x1, yes1count=x2, yes1percent=x3, no2count=x4, no2percent=x5)\n\n#existing rows/cases\nnrow(aus_marriage2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 134\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#existing columns/cases\nncol(aus_marriage2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(aus_marriage2) * (ncol(aus_marriage2)-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 536\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n2 + 2 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing               982.\n 2 Mexico   1980 NAFTA incoming              -185.\n 3 USA      1990 NAFTA outgoing               233.\n 4 USA      1990 NAFTA incoming               855.\n 5 France   1980 EU    outgoing              -619.\n 6 France   1980 EU    incoming               810.\n 7 Mexico   1990 NAFTA outgoing              1223.\n 8 Mexico   1990 NAFTA incoming              1026.\n 9 USA      1980 NAFTA outgoing              1255.\n10 USA      1980 NAFTA incoming              1377.\n11 France   1990 EU    outgoing               432.\n12 France   1990 EU    incoming              1291.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\nThe dataset contains information on responses to a single type of question (yes or no) in a specific district within a particular division in Australia. Each row in the dataset represents a unique observation of this type of response in the district, and each column represents a distinct variable of interest. The dataset satisfies the principles of tidy data, meaning that each cell in the dataset contains a single value, and there are no duplicate or missing values. In total, the tidy dataset contains 268 rows and 5 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naus_marriage_tidy <- aus_marriage2 %>%\n    pivot_longer(-c('district', 'division'), names_to=c(\"resp\", \".value\"), names_sep = \"\\\\d\")\n\naus_marriage_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 268 √ó 5\n   district  division        resp  count percent\n   <chr>     <chr>           <chr> <dbl>   <dbl>\n 1 Banks     New South Wales yes   37736    44.9\n 2 Banks     New South Wales no    46343    55.1\n 3 Barton    New South Wales yes   37153    43.6\n 4 Barton    New South Wales no    47984    56.4\n 5 Bennelong New South Wales yes   42943    49.8\n 6 Bennelong New South Wales no    43215    50.2\n 7 Berowra   New South Wales yes   48471    54.6\n 8 Berowra   New South Wales no    40369    45.4\n 9 Blaxland  New South Wales yes   20406    26.1\n10 Blaxland  New South Wales no    57926    73.9\n# ‚Ä¶ with 258 more rows\n```\n:::\n:::\n\n\n\nWhen performing data pivoting in R, it can be useful to rename the new columns created by the pivot operation based on a consistent pattern. This helps R identify which columns correspond to which values in the resulting table. By renaming the columns in this way, we can make it easier to work with the pivoted data and apply additional data manipulations or analysis. Essentially, renaming the columns in a consistent way after pivoting allows for clearer identification and organization of the resulting data.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}