{
  "hash": "f5f2ebd7edc27273d170d10908ed3a1a",
  "result": {
    "markdown": "---\ntitle: \"Challenge 7 Instructions\"\nauthor: \"Linda Humphrey\"\ndescription: \"Visualizing Multiple Dimensions\"\ndate: \"04/17/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_7\n  - hotel_bookings\n  - australian_marriage\n  - air_bnb\n  - eggs\n  - abc_poll\n  - faostat\n  - usa_households\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  Recreate at least two graphs from previous exercises, but introduce at least one additional dimension that you omitted before using ggplot functionality (color, shape, line, facet, etc) The goal is not to create unneeded [chart ink (Tufte)](https://www.edwardtufte.com/tufte/), but to concisely capture variation in additional dimensions that were collapsed in your earlier 2 or 3 dimensional graphs.\n   - Explain why you choose the specific graph type\n5) If you haven't tried in previous weeks, work this week to make your graphs \"publication\" ready with titles, captions, and pretty axis labels and other viewer-friendly features\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code. And anyone not familiar with Edward Tufte should check out his [fantastic books](https://www.edwardtufte.com/tufte/books_vdqi) and [courses on data visualizaton.](https://www.edwardtufte.com/tufte/courses)\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n  - eggs ⭐\n  - abc_poll ⭐⭐\n  - australian_marriage ⭐⭐\n  - hotel_bookings ⭐⭐⭐\n  - air_bnb  ⭐⭐⭐\n  - us_hh ⭐⭐⭐⭐\n  - faostat ⭐⭐⭐⭐⭐\n\n### Briefly describe the data\n\nThe FAOSTAT_livestock.csv dataset is a comprehensive source of information on livestock production and trade, sourced from the FAO. The dataset includes data on various types of livestock, including cattle, sheep, goats, pigs, poultry, and other animals. For each type of livestock, the data includes information on production quantities, trade volumes, and population sizes, as well as related indicators such as feed consumption and meat yield.\n\nThe data is organized by country and year, with information spanning several decades in some cases. The dataset also includes aggregate data for regions and the world as a whole.\n\n## Read data\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load data \nFAOSTAT_livestock <- read.csv(\"~/Desktop/601_Spring_2023/posts/_data/FAOSTAT_livestock.csv\")\nhead(FAOSTAT_livestock)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Domain.Code       Domain Area.Code        Area Element.Code Element Item.Code\n1          QA Live Animals         2 Afghanistan         5111  Stocks      1107\n2          QA Live Animals         2 Afghanistan         5111  Stocks      1107\n3          QA Live Animals         2 Afghanistan         5111  Stocks      1107\n4          QA Live Animals         2 Afghanistan         5111  Stocks      1107\n5          QA Live Animals         2 Afghanistan         5111  Stocks      1107\n6          QA Live Animals         2 Afghanistan         5111  Stocks      1107\n   Item Year.Code Year Unit   Value Flag Flag.Description\n1 Asses      1961 1961 Head 1300000         Official data\n2 Asses      1962 1962 Head  851850         Official data\n3 Asses      1963 1963 Head 1001112         Official data\n4 Asses      1964 1964 Head 1150000    F     FAO estimate\n5 Asses      1965 1965 Head 1300000         Official data\n6 Asses      1966 1966 Head 1200000         Official data\n```\n:::\n:::\n\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename columns\ncolnames(df) <- c(\"Country\", \"Year\", \"Livestock\", \"Indicator\", \"Value\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `colnames<-`(`*tmp*`, value = c(\"Country\", \"Year\", \"Livestock\", : attempt to set 'colnames' on an object with less than two dimensions\n```\n:::\n\n```{.r .cell-code}\n# Remove rows with missing values\ndf <- drop_na(df)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"drop_na\"): no applicable method for 'drop_na' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\n# Convert the Value column to numeric\ndf$Value <- as.numeric(df$Value)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in df$Value: object of type 'closure' is not subsettable\n```\n:::\n\n```{.r .cell-code}\n# Remove duplicates\ndf <- distinct(df)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"distinct\"): no applicable method for 'distinct' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\n# Normalize data\ndf <- df %>% \n  group_by(Country, Year) %>%\n  mutate(Value_per_capita = Value / Population)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in UseMethod(\"group_by\"): no applicable method for 'group_by' applied to an object of class \"function\"\n```\n:::\n\n```{.r .cell-code}\n# Format Year column to a consistent format\ndf$Year <- as.Date(paste0(df$Year, \"-01-01\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in df$Year: object of type 'closure' is not subsettable\n```\n:::\n\n```{.r .cell-code}\n# Save the cleaned dataset\nwrite_csv(df, \"FAOSTAT_livestock_cleaned.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in write_delim(x, file, delim = \",\", na = na, append = append, col_names = col_names, : is.data.frame(x) is not TRUE\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n:::\n\n\n## Visualization with Multiple Dimensions\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}